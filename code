#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <unordered_map>
#include <queue>

using namespace std;

struct Component {
    string type;
    vector<string> inputs;
    int delay;
};

// Function to parse the library file
void parseLibraryFile(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open library file " << filename << endl;
        exit(EXIT_FAILURE);
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string name, type, expression;
        int num_inputs, delay;
        char comma;
        ss >> name >> comma >> num_inputs >> comma >> expression >> comma >> delay;
        circuit[name] = {type, vector<string>(num_inputs), delay};--
    }

    file.close();
}

// Function to parse the circuit file
void parseCircuitFile(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open circuit file " << filename << endl;
        exit(EXIT_FAILURE);
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string type, name, output;
        ss >> name >> type >> output;
        if (type == "INPUTS:") {
            while (ss >> name) {
                inputs[name] = 0; // Initialize inputs to logic 0
            }
        } else if (type == "COMPONENTS:") {
            circuit[output].type = name;
            while (ss >> name) {
                circuit[output].inputs.push_back(name);
            }
        }
    }

    file.close();
}

// Function to parse the stimuli file
vector<Stimulus> parseStimuliFile(const string& filename) {
    vector<Stimulus> stimuli;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open stimuli file " << filename << endl;
        exit(EXIT_FAILURE);
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        Stimulus stimulus;
        char comma;
        ss >> stimulus.time >> comma >> stimulus.input >> stimulus.value;
        stimuli.push_back(stimulus);
    }

    file.close();
    return stimuli;
}

int main:
{



}
