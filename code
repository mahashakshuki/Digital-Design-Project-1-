#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

using namespace std;

// Define a struct for circuit components
struct Component {
    string name;
    int num_inputs;
    string output_expression;
    int delay_ps;
};

// Define a struct for stimuli
struct Stimulus {
    int time_stamp_ps;
    string input;
    int logic_value;
};

// Function to parse the library file
vector<Component> parseLibraryFile(const string& filename) {
    vector<Component> components;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open library file " << filename << endl;
        exit(EXIT_FAILURE);
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        Component comp;
        char comma;
        ss >> comp.name >> comma >> comp.num_inputs >> comma >> comp.output_expression >> comma >> comp.delay_ps;
        components.push_back(comp);
    }

    file.close();
    return components;
}

// Function to parse the circuit file
pair<vector<string>, vector<Component>> parseCircuitFile(const string& filename) {
    vector<string> inputs;
    vector<Component> circuit;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open circuit file " << filename << endl;
        exit(EXIT_FAILURE);
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string type, name, output;
        ss >> name >> type >> output;
        if (type == "INPUTS:") {
            while (ss >> name) {
                inputs.push_back(name);
            }
        } else if (type == "COMPONENTS:") {
            Component comp;
            comp.name = name;
            comp.output_expression = output;
            while (ss >> name) {
                comp.num_inputs++;
                comp.num_inputs;
            }
            circuit.push_back(comp);
        }
    }

    file.close();
    return make_pair(inputs, circuit);
}

// Function to parse the stimuli file
vector<Stimulus> parseStimuliFile(const string& filename) {
    vector<Stimulus> stimuli;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error: Unable to open stimuli file " << filename << endl;
        exit(EXIT_FAILURE);
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        Stimulus stimulus;
        char comma;
        ss >> stimulus.time_stamp_ps >> comma >> stimulus.input >> comma >> stimulus.logic_value;
        stimuli.push_back(stimulus);
    }

    file.close();
    return stimuli;
}
